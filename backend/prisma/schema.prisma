// Generates the Prisma Client into the specified output folder
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// Defines the database source and connection URL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles within the application
enum UserRole {
  ADMIN
  USER
}

// Enum for difficulty level of a problem
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// User model definition
model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems   Problem[]
  Submission Submission[]
}

// Problem model definition
model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relationship
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  submission Submission[]
}

model Submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted, Wrong Answer
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Relationship
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem       Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String     @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  stderr        String?
  expected      String
  compileOutput String?
  status        String // Accepted, Wrong Answer
  memory        String?
  time          String?
  createdAt     DateTime   @default(now())
  // Relationship
  Submission    Submission @relation(fields: [submissionId], references: [id])

  @@index([submissionId])
}
